// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package posts

import (
	"context"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			DeleteByIDFunc: func(ctx context.Context, ID string) error {
//				panic("mock out the DeleteByID method")
//			},
//			GetByIDFunc: func(ctx context.Context, ID string) (Post, error) {
//				panic("mock out the GetByID method")
//			},
//			GetListFunc: func(ctx context.Context, limit int, offset int) ([]Post, error) {
//				panic("mock out the GetList method")
//			},
//			SaveFunc: func(ctx context.Context, post Post) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, ID string) error

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, ID string) (Post, error)

	// GetListFunc mocks the GetList method.
	GetListFunc func(ctx context.Context, limit int, offset int) ([]Post, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, post Post) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
		}
		// GetList holds details about calls to the GetList method.
		GetList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Post is the post argument value.
			Post Post
		}
	}
	lockDeleteByID sync.RWMutex
	lockGetByID    sync.RWMutex
	lockGetList    sync.RWMutex
	lockSave       sync.RWMutex
}

// DeleteByID calls DeleteByIDFunc.
func (mock *StoreMock) DeleteByID(ctx context.Context, ID string) error {
	if mock.DeleteByIDFunc == nil {
		panic("StoreMock.DeleteByIDFunc: method is nil but Store.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  ID,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, ID)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedStore.DeleteByIDCalls())
func (mock *StoreMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *StoreMock) GetByID(ctx context.Context, ID string) (Post, error) {
	if mock.GetByIDFunc == nil {
		panic("StoreMock.GetByIDFunc: method is nil but Store.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  ID,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, ID)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedStore.GetByIDCalls())
func (mock *StoreMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetList calls GetListFunc.
func (mock *StoreMock) GetList(ctx context.Context, limit int, offset int) ([]Post, error) {
	if mock.GetListFunc == nil {
		panic("StoreMock.GetListFunc: method is nil but Store.GetList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetList.Lock()
	mock.calls.GetList = append(mock.calls.GetList, callInfo)
	mock.lockGetList.Unlock()
	return mock.GetListFunc(ctx, limit, offset)
}

// GetListCalls gets all the calls that were made to GetList.
// Check the length with:
//
//	len(mockedStore.GetListCalls())
func (mock *StoreMock) GetListCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetList.RLock()
	calls = mock.calls.GetList
	mock.lockGetList.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *StoreMock) Save(ctx context.Context, post Post) error {
	if mock.SaveFunc == nil {
		panic("StoreMock.SaveFunc: method is nil but Store.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Post Post
	}{
		Ctx:  ctx,
		Post: post,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, post)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedStore.SaveCalls())
func (mock *StoreMock) SaveCalls() []struct {
	Ctx  context.Context
	Post Post
} {
	var calls []struct {
		Ctx  context.Context
		Post Post
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
